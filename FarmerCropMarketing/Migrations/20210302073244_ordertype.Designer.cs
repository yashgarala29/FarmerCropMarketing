// <auto-generated />
using System;
using FarmerCropMarketing.Models.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FarmerCropMarketing.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210302073244_ordertype")]
    partial class ordertype
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("FarmerCropMarketing.Models.Admin", b =>
                {
                    b.Property<int>("Admin_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.HasKey("Admin_id");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("FarmerCropMarketing.Models.Cart", b =>
                {
                    b.Property<int>("Cart_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Crops_id")
                        .HasColumnType("int");

                    b.Property<int>("Farmers_id")
                        .HasColumnType("int");

                    b.HasKey("Cart_id");

                    b.HasIndex("Crops_id");

                    b.HasIndex("Farmers_id");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("FarmerCropMarketing.Models.Class.MSPCropsDetail", b =>
                {
                    b.Property<int>("MSPCrops_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Crop_Buying_End_Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Crop_Buying_Staring_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Crops_description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Crops_image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Crops_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Crops_price")
                        .HasColumnType("int");

                    b.HasKey("MSPCrops_id");

                    b.ToTable("MSPCropsDetails");
                });

            modelBuilder.Entity("FarmerCropMarketing.Models.Class.MSPSellCrops", b =>
                {
                    b.Property<int>("MSPSell_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Farmers_address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Farmers_email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Farmers_mobile_no")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Farmers_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MSPCrops_id")
                        .HasColumnType("int");

                    b.HasKey("MSPSell_id");

                    b.HasIndex("MSPCrops_id");

                    b.ToTable("MSPSellCrops");
                });

            modelBuilder.Entity("FarmerCropMarketing.Models.Crops", b =>
                {
                    b.Property<int>("Crops_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Crops_description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Crops_image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Crops_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Crops_price")
                        .HasColumnType("int");

                    b.Property<int>("Crops_quantity")
                        .HasColumnType("int");

                    b.Property<int>("Farmers_id")
                        .HasColumnType("int");

                    b.Property<int?>("Seller_id")
                        .HasColumnType("int");

                    b.Property<bool>("buyOrsell")
                        .HasColumnType("bit");

                    b.Property<bool>("itComplited")
                        .HasColumnType("bit");

                    b.HasKey("Crops_id");

                    b.HasIndex("Seller_id");

                    b.ToTable("Crops");
                });

            modelBuilder.Entity("FarmerCropMarketing.Models.Farmers", b =>
                {
                    b.Property<int>("Farmers_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Farmers_address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Farmers_email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Farmers_image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Farmers_mobile_no")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Farmers_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Farmers_id");

                    b.ToTable("Farmers");
                });

            modelBuilder.Entity("FarmerCropMarketing.Models.Orders", b =>
                {
                    b.Property<int>("Orders_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Crops_id")
                        .HasColumnType("int");

                    b.Property<int>("Farmers_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("delivery_date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("order_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("order_status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ordertype")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("seller_id")
                        .HasColumnType("int");

                    b.Property<int>("total_pricer")
                        .HasColumnType("int");

                    b.HasKey("Orders_id");

                    b.HasIndex("Crops_id");

                    b.HasIndex("Farmers_id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FarmerCropMarketing.Models.Cart", b =>
                {
                    b.HasOne("FarmerCropMarketing.Models.Crops", "Crops")
                        .WithMany("Cart")
                        .HasForeignKey("Crops_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmerCropMarketing.Models.Farmers", "Farmers")
                        .WithMany("Cart")
                        .HasForeignKey("Farmers_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crops");

                    b.Navigation("Farmers");
                });

            modelBuilder.Entity("FarmerCropMarketing.Models.Class.MSPSellCrops", b =>
                {
                    b.HasOne("FarmerCropMarketing.Models.Class.MSPCropsDetail", "MSPCropsDetail")
                        .WithMany("MSPSellCrops")
                        .HasForeignKey("MSPCrops_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MSPCropsDetail");
                });

            modelBuilder.Entity("FarmerCropMarketing.Models.Crops", b =>
                {
                    b.HasOne("FarmerCropMarketing.Models.Farmers", "Farmers")
                        .WithMany("Crops")
                        .HasForeignKey("Seller_id");

                    b.Navigation("Farmers");
                });

            modelBuilder.Entity("FarmerCropMarketing.Models.Orders", b =>
                {
                    b.HasOne("FarmerCropMarketing.Models.Crops", "Crops")
                        .WithMany()
                        .HasForeignKey("Crops_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmerCropMarketing.Models.Farmers", "Farmers")
                        .WithMany()
                        .HasForeignKey("Farmers_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crops");

                    b.Navigation("Farmers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmerCropMarketing.Models.Class.MSPCropsDetail", b =>
                {
                    b.Navigation("MSPSellCrops");
                });

            modelBuilder.Entity("FarmerCropMarketing.Models.Crops", b =>
                {
                    b.Navigation("Cart");
                });

            modelBuilder.Entity("FarmerCropMarketing.Models.Farmers", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("Crops");
                });
#pragma warning restore 612, 618
        }
    }
}
